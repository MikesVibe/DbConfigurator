// <auto-generated />
using System;
using DbConfigurator.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbConfigurator.DataAccess.Migrations
{
    [DbContext(typeof(DbConfiguratorDbContext))]
    [Migration("20230508184312_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AreaBuisnessUnit", b =>
                {
                    b.Property<int>("AreasId")
                        .HasColumnType("int");

                    b.Property<int>("BuisnessUnitsId")
                        .HasColumnType("int");

                    b.HasKey("AreasId", "BuisnessUnitsId");

                    b.HasIndex("BuisnessUnitsId");

                    b.ToTable("AreaBuisnessUnit");
                });

            modelBuilder.Entity("BuisnessUnitCountry", b =>
                {
                    b.Property<int>("BuisnessUnitsId")
                        .HasColumnType("int");

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.HasKey("BuisnessUnitsId", "CountriesId");

                    b.HasIndex("CountriesId");

                    b.ToTable("BuisnessUnitCountry");
                });

            modelBuilder.Entity("DbConfigurator.Model.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("DbConfigurator.Model.BuisnessUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("BuisnessUnit");
                });

            modelBuilder.Entity("DbConfigurator.Model.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DbConfigurator.Model.DistributionInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("BuisnessUnitId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<int?>("RecipientsGroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("BuisnessUnitId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RecipientsGroupId")
                        .IsUnique()
                        .HasFilter("[RecipientsGroupId] IS NOT NULL");

                    b.ToTable("DistributionInformation");
                });

            modelBuilder.Entity("DbConfigurator.Model.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("DbConfigurator.Model.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Recipient");
                });

            modelBuilder.Entity("DbConfigurator.Model.RecipientsGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistributionInformationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecipientsGroup");
                });

            modelBuilder.Entity("RecipientRecipientsGroup", b =>
                {
                    b.Property<int>("RecipientsGroupsToId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientsToId")
                        .HasColumnType("int");

                    b.HasKey("RecipientsGroupsToId", "RecipientsToId");

                    b.HasIndex("RecipientsToId");

                    b.ToTable("RecipientsGroupTo", (string)null);
                });

            modelBuilder.Entity("RecipientRecipientsGroup1", b =>
                {
                    b.Property<int>("RecipientsCcId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientsGroupsCcId")
                        .HasColumnType("int");

                    b.HasKey("RecipientsCcId", "RecipientsGroupsCcId");

                    b.HasIndex("RecipientsGroupsCcId");

                    b.ToTable("RecipientsGroupCc", (string)null);
                });

            modelBuilder.Entity("AreaBuisnessUnit", b =>
                {
                    b.HasOne("DbConfigurator.Model.Area", null)
                        .WithMany()
                        .HasForeignKey("AreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.BuisnessUnit", null)
                        .WithMany()
                        .HasForeignKey("BuisnessUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuisnessUnitCountry", b =>
                {
                    b.HasOne("DbConfigurator.Model.BuisnessUnit", null)
                        .WithMany()
                        .HasForeignKey("BuisnessUnitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbConfigurator.Model.DistributionInformation", b =>
                {
                    b.HasOne("DbConfigurator.Model.Area", "Area")
                        .WithMany("DistributionInformations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.BuisnessUnit", "BuisnessUnit")
                        .WithMany("DistributionInformations")
                        .HasForeignKey("BuisnessUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.Country", "Country")
                        .WithMany("DistributionInformations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.Priority", "Priority")
                        .WithMany("DistributionInformations")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.RecipientsGroup", "RecipientsGroup")
                        .WithOne("DistributionInformation")
                        .HasForeignKey("DbConfigurator.Model.DistributionInformation", "RecipientsGroupId");

                    b.Navigation("Area");

                    b.Navigation("BuisnessUnit");

                    b.Navigation("Country");

                    b.Navigation("Priority");

                    b.Navigation("RecipientsGroup");
                });

            modelBuilder.Entity("RecipientRecipientsGroup", b =>
                {
                    b.HasOne("DbConfigurator.Model.RecipientsGroup", null)
                        .WithMany()
                        .HasForeignKey("RecipientsGroupsToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.Recipient", null)
                        .WithMany()
                        .HasForeignKey("RecipientsToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecipientRecipientsGroup1", b =>
                {
                    b.HasOne("DbConfigurator.Model.Recipient", null)
                        .WithMany()
                        .HasForeignKey("RecipientsCcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DbConfigurator.Model.RecipientsGroup", null)
                        .WithMany()
                        .HasForeignKey("RecipientsGroupsCcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DbConfigurator.Model.Area", b =>
                {
                    b.Navigation("DistributionInformations");
                });

            modelBuilder.Entity("DbConfigurator.Model.BuisnessUnit", b =>
                {
                    b.Navigation("DistributionInformations");
                });

            modelBuilder.Entity("DbConfigurator.Model.Country", b =>
                {
                    b.Navigation("DistributionInformations");
                });

            modelBuilder.Entity("DbConfigurator.Model.Priority", b =>
                {
                    b.Navigation("DistributionInformations");
                });

            modelBuilder.Entity("DbConfigurator.Model.RecipientsGroup", b =>
                {
                    b.Navigation("DistributionInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
